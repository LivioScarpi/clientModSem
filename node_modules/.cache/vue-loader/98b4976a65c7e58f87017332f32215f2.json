{"remainingRequest":"/Volumes/DATI/client_modsem/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/DATI/client_modsem/src/components/Concerti.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/DATI/client_modsem/src/components/Concerti.vue","mtime":1640030433785},{"path":"/Volumes/DATI/client_modsem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/DATI/client_modsem/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Volumes/DATI/client_modsem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/DATI/client_modsem/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7QkNvbnRhaW5lciwgQlJvdywgQkNvbH0gZnJvbSAiYm9vdHN0cmFwLXZ1ZSI7Cgpjb25zdCBTcGFycWxDbGllbnQgPSByZXF1aXJlKCdzcGFycWwtaHR0cC1jbGllbnQnKQpjb25zdCBlbmRwb2ludFVybCA9ICdodHRwOi8vbG9jYWxob3N0OjcyMDAvcmVwb3NpdG9yaWVzL01FTycKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQ29uY2VydGkiLAoKICBjb21wb25lbnRzOiB7CiAgICAvL0JCdXR0b24sCiAgICBCQ29udGFpbmVyLCBCUm93LCBCQ29sCiAgfSwKCiAgZGF0YTogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHsKICAgICAgYXJ0aXN0U2VsZWN0ZWQ6IG51bGwsCiAgICAgIGFsbEFydGlzdHM6IFtdLAogICAgICBhcnRpc3RzTG9hZGVkOiBmYWxzZSwKICAgICAgYWxsTG9hZGVkOiBmYWxzZSwKICAgICAgYXJ0aXN0c2V2ZW50czogW10sCiAgICAgIHN0YXR1czogJ25vdF9zZWxlY3RlZCcKICAgIH0KICB9LAoKICBhc3luYyBtb3VudGVkKCkgewoKICAgIGNvbnN0IHF1ZXJ5ID0gYAogICAgICBQUkVGSVggbWVvOiA8aHR0cDovL3d3dy5tb2RzZW0ub3JnL211c2ljYWxFdmVudHNPbnRvbG9neSM+CiAgICAgIFBSRUZJWCByZGY6IDxodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjPgogICAgICBQUkVGSVggb3dsOiA8aHR0cDovL3d3dy53My5vcmcvMjAwMi8wNy9vd2wjPgogICAgICBQUkVGSVggcmRmczogPGh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDEvcmRmLXNjaGVtYSM+CiAgICAgIFBSRUZJWCB4c2Q6IDxodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSM+CgogICAgICBzZWxlY3QgP25vbWVBcnRpc3RhCiAgICAgIHdoZXJlIHsKICAgICAgICA/YXJ0aXN0YSByZGY6dHlwZSBtZW86QWdlbnRlTXVzaWNhbGU7CiAgICAgICAgbWVvOm5vbWVBZ2VudGVNdXNpY2FsZSA/bm9tZUFydGlzdGEuCiAgICAgIH0gbGltaXQgMTAwCiAgICBgOwoKICAgIGNvbnN0IGNsaWVudCA9IG5ldyBTcGFycWxDbGllbnQoe2VuZHBvaW50VXJsfSkKICAgIGNvbnN0IHN0cmVhbSA9IGF3YWl0IGNsaWVudC5xdWVyeS5zZWxlY3QocXVlcnkpCgogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIHN0cmVhbS5vbignZGF0YScsIHJvdyA9PiB7CiAgICAgIGNvbnNvbGUubG9nKHJvdyk7CiAgICAgIE9iamVjdC5lbnRyaWVzKHJvdykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7CgogICAgICAgIHZhciBhcnRpc3ROYW1lID0gdmFsdWUudmFsdWUucmVwbGFjZSgnaHR0cDovL3d3dy5tb2RzZW0ub3JnL211c2ljYWxFdmVudHNPbnRvbG9neSMnLCAnJyk7CgogICAgICAgIHNlbGYuYWxsQXJ0aXN0cy5wdXNoKHt2YWx1ZTogYXJ0aXN0TmFtZSwgdGV4dDogYXJ0aXN0TmFtZX0pOwoKICAgICAgICBjb25zb2xlLmxvZyhgJHtrZXl9OiAke3ZhbHVlLnZhbHVlfSAoJHt2YWx1ZS50ZXJtVHlwZX0pYCkKICAgICAgfSkKCiAgICAgIHNlbGYuYXJ0aXN0c0xvYWRlZCA9IHRydWU7CiAgICB9KQoKICAgIHN0cmVhbS5vbignZXJyb3InLCBlcnIgPT4gewogICAgICBjb25zb2xlLmVycm9yKGVycikKICAgIH0pCiAgfSwKCiAgbWV0aG9kczogewogICAgYXN5bmMgZmluZExpdmVFdmVudHMoYXJ0aXN0TmFtZSkgewogICAgICB0aGlzLmFydGlzdHNldmVudHMgPSBbXTsKCiAgICAgIHZhciBxdWVyeSA9ICIiOwoKICAgICAgaWYodGhpcy5zdGF0dXMgPT09ICdzZWxlY3RlZCcpIHsKICAgICAgICBxdWVyeSA9IGAKUFJFRklYIG1lbzogPGh0dHA6Ly93d3cubW9kc2VtLm9yZy9tdXNpY2FsRXZlbnRzT250b2xvZ3kjPgpQUkVGSVggcmRmOiA8aHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIz4KUFJFRklYIG93bDogPGh0dHA6Ly93d3cudzMub3JnLzIwMDIvMDcvb3dsIz4KUFJFRklYIHJkZnM6IDxodHRwOi8vd3d3LnczLm9yZy8yMDAwLzAxL3JkZi1zY2hlbWEjPgpQUkVGSVggeHNkOiA8aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjPgoKc2VsZWN0IGRpc3RpbmN0ID9hcnRpc3RhID9ldmVudG8gP25vbWVFdmVudG8gP2RhdGFFdmVudG8gP2NhcGllbnphTWFzc2ltYUV2ZW50byA/c3RydXR0dXJhRXZlbnRvCndoZXJlIHsKICAgIHsKICAgID9hcnRpc3RhIHJkZjp0eXBlIG1lbzpBZ2VudGVNdXNpY2FsZTsKICAgICAgICAgICAgIG1lbzpub21lQWdlbnRlTXVzaWNhbGUgP25vbWVBcnRpc3RhLgogICAgRklMVEVSIHJlZ2V4KD9ub21lQXJ0aXN0YSwgImAgKyBhcnRpc3ROYW1lICsgYCIpLgogICAgP2V2ZW50byByZGY6dHlwZSBtZW86Q29uY2VydG87CiAgICAgICAgICAgIG1lbzpub21lRXZlbnRvTXVzaWNhbGUgP25vbWVFdmVudG87CiAgICAgICAgICAgIG1lbzpkYXRhRXZlbnRvTXVzaWNhbGUgP2RhdGFFdmVudG87CiAgICAgICAgICAgIG1lbzpldmVudG9JblN0cnV0dHVyYSA/c3RydXR0dXJhRXZlbnRvOwogICAgICAgICAgICBtZW86Y2FwaWVuemFNYXNzaW1hRXZlbnRvTXVzaWNhbGUgP2NhcGllbnphTWFzc2ltYUV2ZW50by4KICAgICAgICAgICAgRklMVEVSIE5PVCBFWElTVFMgewogICAgP2FydGlzdGEgbWVvOmFnZW50ZVBhcnRlY2lwYUFwZXJ0dXJhID9ldmVudG8uCiAgICB9CgogICAgfQp9IGxpbWl0IDEwMAogICAgICBgOwogICAgICB9IGVsc2UgewogICAgICAgIHF1ZXJ5ID0gYApQUkVGSVggbWVvOiA8aHR0cDovL3d3dy5tb2RzZW0ub3JnL211c2ljYWxFdmVudHNPbnRvbG9neSM+ClBSRUZJWCByZGY6IDxodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjPgpQUkVGSVggb3dsOiA8aHR0cDovL3d3dy53My5vcmcvMjAwMi8wNy9vd2wjPgpQUkVGSVggcmRmczogPGh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDEvcmRmLXNjaGVtYSM+ClBSRUZJWCB4c2Q6IDxodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSM+CgpzZWxlY3QgZGlzdGluY3QgP2FydGlzdGEgP2V2ZW50byA/bm9tZUV2ZW50byA/ZGF0YUV2ZW50byA/Y2FwaWVuemFNYXNzaW1hRXZlbnRvID9zdHJ1dHR1cmFFdmVudG8Kd2hlcmUgewogICAgewogICAgP2FydGlzdGEgcmRmOnR5cGUgbWVvOkFnZW50ZU11c2ljYWxlOwogICAgICAgICAgICAgbWVvOm5vbWVBZ2VudGVNdXNpY2FsZSA/bm9tZUFydGlzdGEuCiAgICBGSUxURVIgcmVnZXgoP25vbWVBcnRpc3RhLCAiYCArIGFydGlzdE5hbWUgKyBgIikuCiAgICA/ZXZlbnRvIHJkZjp0eXBlIG1lbzpDb25jZXJ0bzsKICAgICAgICAgICAgbWVvOm5vbWVFdmVudG9NdXNpY2FsZSA/bm9tZUV2ZW50bzsKICAgICAgICAgICAgbWVvOmRhdGFFdmVudG9NdXNpY2FsZSA/ZGF0YUV2ZW50bzsKICAgICAgICAgICAgbWVvOmV2ZW50b0luU3RydXR0dXJhID9zdHJ1dHR1cmFFdmVudG87CiAgICAgICAgICAgIG1lbzpjYXBpZW56YU1hc3NpbWFFdmVudG9NdXNpY2FsZSA/Y2FwaWVuemFNYXNzaW1hRXZlbnRvLgoKICAgIH0KfSBsaW1pdCAxMDAKICAgICAgYDsKICAgICAgfQoKICAgICAgLy9Db3N0cnVpc2NvIGxhIHF1ZXJ5CgogICAgICAvL0NoaWFtbyBpbCBtZXRvZG8gY2hlIGVzZWd1ZSBsYSBxdWVyeTogc2l0dWF0byBuZWwgY29tcG9uZW50IHByaW5jaXBhbGUKICAgICAgdGhpcy5hcnRpc3RzZXZlbnRzID0gYXdhaXQgdGhpcy4kcm9vdC4kcmVmcy5IZWxsb1dvcmxkLm1ha2VRdWVyeShxdWVyeSk7CiAgICB9LAogIH0KfQoK"},{"version":3,"sources":["Concerti.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA","file":"Concerti.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"m-3\">\n    <div v-if=\"artistsLoaded\">\n      <!--\n      <b-form-select v-model=\"artistSelected\" :options=\"allArtists\"></b-form-select>\n      <div class=\"mt-3\">Selected: <strong>{{ artistSelected }}</strong></div>\n      <div>\n        <b-button variant=\"primary\" @click=\"findLiveEvents()\">Trova eventi Live dell'artista</b-button>\n      </div>-->\n      <h3>Eventi live degli artisti</h3>\n\n\n      <b-container class=\"bv-example-row\">\n        <b-row class=\"text-center\">\n          <b-col cols=\"3\">\n            <b-form-checkbox\n                id=\"checkbox-1\"\n                v-model=\"status\"\n                name=\"checkbox-1\"\n                value=\"selected\"\n                unchecked-value=\"not_selected\"\n            >\n              Mostra solo concerti in cui l'artista ha avuto il ruolo di artista principale\n            </b-form-checkbox>\n            <b-list-group>\n              <b-list-group-item v-for=\"(elem, index) in allArtists\" :key=\"index\" @click=\"findLiveEvents(elem.value)\" button>{{ elem.value }}</b-list-group-item>\n            </b-list-group>\n          </b-col>\n          <b-col cols=\"9\">\n              <div v-if=\"artistsevents.length > 0\">\n                <b-table striped hover :items=\"artistsevents\"></b-table>\n              </div>\n            <div v-else>\n              <h5>L'artista non ha partecipato a nessun concerto con il ruolo di artista principale</h5>\n            </div>\n          </b-col>\n        </b-row>\n      </b-container>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {BContainer, BRow, BCol} from \"bootstrap-vue\";\n\nconst SparqlClient = require('sparql-http-client')\nconst endpointUrl = 'http://localhost:7200/repositories/MEO'\n\nexport default {\n  name: \"Concerti\",\n\n  components: {\n    //BButton,\n    BContainer, BRow, BCol\n  },\n\n  data: function () {\n    return {\n      artistSelected: null,\n      allArtists: [],\n      artistsLoaded: false,\n      allLoaded: false,\n      artistsevents: [],\n      status: 'not_selected'\n    }\n  },\n\n  async mounted() {\n\n    const query = `\n      PREFIX meo: <http://www.modsem.org/musicalEventsOntology#>\n      PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n      PREFIX owl: <http://www.w3.org/2002/07/owl#>\n      PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n      PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\n      select ?nomeArtista\n      where {\n        ?artista rdf:type meo:AgenteMusicale;\n        meo:nomeAgenteMusicale ?nomeArtista.\n      } limit 100\n    `;\n\n    const client = new SparqlClient({endpointUrl})\n    const stream = await client.query.select(query)\n\n    var self = this;\n\n    stream.on('data', row => {\n      console.log(row);\n      Object.entries(row).forEach(([key, value]) => {\n\n        var artistName = value.value.replace('http://www.modsem.org/musicalEventsOntology#', '');\n\n        self.allArtists.push({value: artistName, text: artistName});\n\n        console.log(`${key}: ${value.value} (${value.termType})`)\n      })\n\n      self.artistsLoaded = true;\n    })\n\n    stream.on('error', err => {\n      console.error(err)\n    })\n  },\n\n  methods: {\n    async findLiveEvents(artistName) {\n      this.artistsevents = [];\n\n      var query = \"\";\n\n      if(this.status === 'selected') {\n        query = `\nPREFIX meo: <http://www.modsem.org/musicalEventsOntology#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nselect distinct ?artista ?evento ?nomeEvento ?dataEvento ?capienzaMassimaEvento ?strutturaEvento\nwhere {\n    {\n    ?artista rdf:type meo:AgenteMusicale;\n             meo:nomeAgenteMusicale ?nomeArtista.\n    FILTER regex(?nomeArtista, \"` + artistName + `\").\n    ?evento rdf:type meo:Concerto;\n            meo:nomeEventoMusicale ?nomeEvento;\n            meo:dataEventoMusicale ?dataEvento;\n            meo:eventoInStruttura ?strutturaEvento;\n            meo:capienzaMassimaEventoMusicale ?capienzaMassimaEvento.\n            FILTER NOT EXISTS {\n    ?artista meo:agentePartecipaApertura ?evento.\n    }\n\n    }\n} limit 100\n      `;\n      } else {\n        query = `\nPREFIX meo: <http://www.modsem.org/musicalEventsOntology#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nselect distinct ?artista ?evento ?nomeEvento ?dataEvento ?capienzaMassimaEvento ?strutturaEvento\nwhere {\n    {\n    ?artista rdf:type meo:AgenteMusicale;\n             meo:nomeAgenteMusicale ?nomeArtista.\n    FILTER regex(?nomeArtista, \"` + artistName + `\").\n    ?evento rdf:type meo:Concerto;\n            meo:nomeEventoMusicale ?nomeEvento;\n            meo:dataEventoMusicale ?dataEvento;\n            meo:eventoInStruttura ?strutturaEvento;\n            meo:capienzaMassimaEventoMusicale ?capienzaMassimaEvento.\n\n    }\n} limit 100\n      `;\n      }\n\n      //Costruisco la query\n\n      //Chiamo il metodo che esegue la query: situato nel component principale\n      this.artistsevents = await this.$root.$refs.HelloWorld.makeQuery(query);\n    },\n  }\n}\n\n</script>\n\n<style scoped>\n\n</style>"]}]}