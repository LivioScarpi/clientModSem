{"remainingRequest":"/Volumes/DATI/GIT/Progetto-ModeSem/client_modsem/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/DATI/GIT/Progetto-ModeSem/client_modsem/src/components/HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css&","dependencies":[{"path":"/Volumes/DATI/GIT/Progetto-ModeSem/client_modsem/src/components/HelloWorld.vue","mtime":1640021444705},{"path":"/Volumes/DATI/GIT/Progetto-ModeSem/client_modsem/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/DATI/GIT/Progetto-ModeSem/client_modsem/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Volumes/DATI/GIT/Progetto-ModeSem/client_modsem/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Volumes/DATI/GIT/Progetto-ModeSem/client_modsem/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/DATI/GIT/Progetto-ModeSem/client_modsem/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaDMgewogIG1hcmdpbjogNDBweCAwIDA7Cn0KCnVsIHsKICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7CiAgcGFkZGluZzogMDsKfQoKbGkgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICBtYXJnaW46IDAgMTBweDsKfQoKYSB7CiAgY29sb3I6ICM0MmI5ODM7Cn0K"},{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmMA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <b-navbar type=\"dark\" variant=\"dark\">\n      <b-navbar-nav>\n\n        <b-nav-item @click=\"changePage(0)\">Home</b-nav-item>\n        <b-nav-item @click=\"changePage(1)\">Eventi Live Artisti</b-nav-item>\n        <b-nav-item @click=\"changePage(2)\">Gruppi</b-nav-item>\n        <b-nav-item @click=\"changePage(3)\">Città</b-nav-item>\n        <b-nav-item @click=\"changePage(4)\">Concerti</b-nav-item>\n        <b-nav-item @click=\"changePage(5)\">Scalette</b-nav-item>\n        <b-nav-item @click=\"changePage(6)\">Canzoni</b-nav-item>\n\n        <!-- Navbar dropdowns -->\n        <!--\n        <b-nav-item-dropdown text=\"Lang\" right>\n          <b-dropdown-item href=\"#\">EN</b-dropdown-item>\n          <b-dropdown-item href=\"#\">ES</b-dropdown-item>\n          <b-dropdown-item href=\"#\">RU</b-dropdown-item>\n          <b-dropdown-item href=\"#\">FA</b-dropdown-item>\n        </b-nav-item-dropdown>\n        -->\n\n        <b-nav-item-dropdown text=\"User\" right>\n          <b-dropdown-item href=\"#\">Account</b-dropdown-item>\n          <b-dropdown-item href=\"#\">Settings</b-dropdown-item>\n        </b-nav-item-dropdown>\n      </b-navbar-nav>\n    </b-navbar>\n\n    <div v-if=\"this.page === 0\">\n      Homepage\n    </div>\n    <div v-else-if=\"this.page === 1\">\n      <PaginaArtisti/>\n    </div>\n    <div v-else-if=\"this.page === 2\">\n      <Gruppi/>\n    </div>\n    <div v-else-if=\"this.page === 3\">\n      <Città/>\n    </div>\n    <div v-else-if=\"this.page === 4\">\n      <Concerti/>\n    </div>\n    <div v-else-if=\"this.page === 5\">\n      <Scalette/>\n    </div>\n    <div v-else-if=\"this.page === 6\">\n      <Canzoni/>\n    </div>\n\n  </div>\n</template>\n\n<script>\n\nimport PaginaArtisti from \"@/components/PaginaArtisti\";\nimport Gruppi from \"@/components/Gruppi\";\nimport Città from \"@/components/Città\";\nimport Concerti from \"@/components/Concerti\";\nimport Scalette from \"@/components/Scalette\";\nimport Canzoni from \"@/components/Canzoni\";\n\nconst SparqlClient = require('sparql-http-client')\nconst endpointUrl = 'http://localhost:7200/repositories/MEO'\n\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String,\n  },\n\n  components: {\n    PaginaArtisti,\n    Gruppi,\n    Città,\n    Concerti,\n    Scalette,\n    Canzoni\n  },\n\n  data: function () {\n    return {\n      page: 0,\n      queryData: []\n    }\n  },\n\n  created() {\n    this.$root.$refs.HelloWorld = this;\n  },\n\n  async mounted() {\n\n    console.log(this.page);\n\n\n    /*\n    var query = \"select ?artista where { ?artista rdf:type meo:Artista } limit 100\";\n\n    const myFetcher = new SparqlEndpointFetcher({\n      method: 'GET',                   // A custom HTTP method for issuing (non-update) queries, defaults to POST. Update queries are always issued via POST.\n      fetch: fetch,                     // A custom fetch-API-supporting function\n      prefixVariableQuestionMark: false // If variable names in bindings should be prefixed with '?', defaults to false\n    });\n\n    const tripleStream = await myFetcher.fetchTriples('http://localhost:7200/sparql', query);\n    tripleStream.on('data', (triple) => console.log(triple));\n\n     */\n\n    /*\n    const SparqlClient = require('sparql-http-client')\n\n    const endpointUrl = 'http://localhost:7200/repositories/MusicalEventsOntology'\n    const query = `\n      PREFIX meo: <http://www.modsem.org/musicalEventsOntology#>\n      PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n      PREFIX owl: <http://www.w3.org/2002/07/owl#>\n      PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n      PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\n      select ?artista\n      where {\n      ?artista rdf:type meo:Artista\n      } limit 100\n    `;\n\n    const client = new SparqlClient({endpointUrl})\n    const stream = await client.query.select(query)\n\n    stream.on('data', row => {\n      Object.entries(row).forEach(([key, value]) => {\n        console.log(`${key}: ${value.value} (${value.termType})`)\n      })\n    })\n\n    stream.on('error', err => {\n      console.error(err)\n    })\n\n     */\n  },\n\n  methods: {\n    changePage(page) {\n      this.page = page;\n      console.log(this.page);\n    },\n    foo: function() {\n      alert('this is A.foo');\n    },\n    async makeQuery(query) {\n      var queryData = [];\n\n      const client = new SparqlClient({endpointUrl})\n      const stream = await client.query.select(query)\n\n      var i = 0;\n      var nrow = 0;\n\n      /*Recupero il numero di righe della nostra risposta*/\n      stream.on('data', () => {\n        nrow++;\n      })\n\n      /*Inizio l'oggetto da passare al component BTable*/\n      queryData = new Array(Object.entries(nrow).length);\n\n      stream.on('data', row => {\n        queryData.push({});\n\n        Object.entries(row).forEach(([key, value]) => {\n          queryData[i][key] = value.value.replace('http://www.modsem.org/musicalEventsOntology#', '');\n        })\n\n        i++;\n      })\n\n      stream.on('error', err => {\n        console.error(err)\n      })\n\n      return queryData;\n    },\n\n  }\n\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n"]}]}